// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer_addresses.sql

package db

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO app.customer_addresses (customer_id, type, line1, suburb, city, state, postcode, country, latitude, longitude)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING address_id, customer_id, type, line1, suburb, city, state, postcode, country, latitude, longitude
`

type CreateAddressParams struct {
	CustomerID int64          `db:"customer_id" json:"customerId"`
	Type       string         `db:"type" json:"type"`
	Line1      sql.NullString `db:"line1" json:"line1"`
	Suburb     sql.NullString `db:"suburb" json:"suburb"`
	City       sql.NullString `db:"city" json:"city"`
	State      sql.NullString `db:"state" json:"state"`
	Postcode   sql.NullString `db:"postcode" json:"postcode"`
	Country    sql.NullString `db:"country" json:"country"`
	Latitude   sql.NullString `db:"latitude" json:"latitude"`
	Longitude  sql.NullString `db:"longitude" json:"longitude"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (AppCustomerAddress, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.CustomerID,
		arg.Type,
		arg.Line1,
		arg.Suburb,
		arg.City,
		arg.State,
		arg.Postcode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
	)
	var i AppCustomerAddress
	err := row.Scan(
		&i.AddressID,
		&i.CustomerID,
		&i.Type,
		&i.Line1,
		&i.Suburb,
		&i.City,
		&i.State,
		&i.Postcode,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM app.customer_addresses WHERE address_id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, addressID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, addressID)
	return err
}

const listAddressesByCustomer = `-- name: ListAddressesByCustomer :many
SELECT address_id, customer_id, type, line1, suburb, city, state, postcode, country, latitude, longitude FROM app.customer_addresses WHERE customer_id = $1 ORDER BY type
`

func (q *Queries) ListAddressesByCustomer(ctx context.Context, customerID int64) ([]AppCustomerAddress, error) {
	rows, err := q.db.QueryContext(ctx, listAddressesByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppCustomerAddress
	for rows.Next() {
		var i AppCustomerAddress
		if err := rows.Scan(
			&i.AddressID,
			&i.CustomerID,
			&i.Type,
			&i.Line1,
			&i.Suburb,
			&i.City,
			&i.State,
			&i.Postcode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE app.customer_addresses
SET type = $2,
    line1 = $3,
    suburb = $4,
    city = $5,
    state = $6,
    postcode = $7,
    country = $8,
    latitude = $9,
    longitude = $10
WHERE address_id = $1
RETURNING address_id, customer_id, type, line1, suburb, city, state, postcode, country, latitude, longitude
`

type UpdateAddressParams struct {
	AddressID int64          `db:"address_id" json:"addressId"`
	Type      string         `db:"type" json:"type"`
	Line1     sql.NullString `db:"line1" json:"line1"`
	Suburb    sql.NullString `db:"suburb" json:"suburb"`
	City      sql.NullString `db:"city" json:"city"`
	State     sql.NullString `db:"state" json:"state"`
	Postcode  sql.NullString `db:"postcode" json:"postcode"`
	Country   sql.NullString `db:"country" json:"country"`
	Latitude  sql.NullString `db:"latitude" json:"latitude"`
	Longitude sql.NullString `db:"longitude" json:"longitude"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (AppCustomerAddress, error) {
	row := q.db.QueryRowContext(ctx, updateAddress,
		arg.AddressID,
		arg.Type,
		arg.Line1,
		arg.Suburb,
		arg.City,
		arg.State,
		arg.Postcode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
	)
	var i AppCustomerAddress
	err := row.Scan(
		&i.AddressID,
		&i.CustomerID,
		&i.Type,
		&i.Line1,
		&i.Suburb,
		&i.City,
		&i.State,
		&i.Postcode,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}
