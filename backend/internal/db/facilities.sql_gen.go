// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: facilities.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createFacility = `-- name: CreateFacility :one
INSERT INTO app.facilities (
    name,
    address,
    region,
    config
) VALUES (
    $1, $2, $3, $4
)
RETURNING facility_id, name, address, region, config
`

type CreateFacilityParams struct {
	Name    string          `db:"name" json:"name"`
	Address sql.NullString  `db:"address" json:"address"`
	Region  sql.NullString  `db:"region" json:"region"`
	Config  json.RawMessage `db:"config" json:"config"`
}

func (q *Queries) CreateFacility(ctx context.Context, arg CreateFacilityParams) (AppFacility, error) {
	row := q.db.QueryRowContext(ctx, createFacility,
		arg.Name,
		arg.Address,
		arg.Region,
		arg.Config,
	)
	var i AppFacility
	err := row.Scan(
		&i.FacilityID,
		&i.Name,
		&i.Address,
		&i.Region,
		&i.Config,
	)
	return i, err
}

const getFacility = `-- name: GetFacility :one
SELECT facility_id, name, address, region, config 
FROM app.facilities 
WHERE facility_id = $1
`

func (q *Queries) GetFacility(ctx context.Context, facilityID int64) (AppFacility, error) {
	row := q.db.QueryRowContext(ctx, getFacility, facilityID)
	var i AppFacility
	err := row.Scan(
		&i.FacilityID,
		&i.Name,
		&i.Address,
		&i.Region,
		&i.Config,
	)
	return i, err
}

const listFacilities = `-- name: ListFacilities :many
SELECT facility_id, name, address, region, config 
FROM app.facilities 
ORDER BY name
`

func (q *Queries) ListFacilities(ctx context.Context) ([]AppFacility, error) {
	rows, err := q.db.QueryContext(ctx, listFacilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppFacility
	for rows.Next() {
		var i AppFacility
		if err := rows.Scan(
			&i.FacilityID,
			&i.Name,
			&i.Address,
			&i.Region,
			&i.Config,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
