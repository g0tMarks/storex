// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO app.customers (customer_name)
VALUES ($1)
RETURNING customer_id, customer_name, created_at, is_enabled
`

func (q *Queries) CreateCustomer(ctx context.Context, customerName string) (AppCustomer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, customerName)
	var i AppCustomer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.CreatedAt,
		&i.IsEnabled,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM app.customers WHERE customer_id = $1::uuid
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, customerID)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, customer_name, created_at, is_enabled FROM app.customers WHERE customer_id = $1::uuid
`

func (q *Queries) GetCustomer(ctx context.Context, customerID uuid.UUID) (AppCustomer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, customerID)
	var i AppCustomer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.CreatedAt,
		&i.IsEnabled,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, customer_name, created_at, is_enabled FROM app.customers ORDER BY customer_name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]AppCustomer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppCustomer
	for rows.Next() {
		var i AppCustomer
		if err := rows.Scan(
			&i.CustomerID,
			&i.CustomerName,
			&i.CreatedAt,
			&i.IsEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE app.customers
SET customer_name = $1, is_enabled = $2
WHERE customer_id = $3::uuid
RETURNING customer_id, customer_name, created_at, is_enabled
`

type UpdateCustomerParams struct {
	CustomerName string    `db:"customer_name" json:"customerName"`
	IsEnabled    bool      `db:"is_enabled" json:"isEnabled"`
	CustomerID   uuid.UUID `db:"customer_id" json:"customerId"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (AppCustomer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer, arg.CustomerName, arg.IsEnabled, arg.CustomerID)
	var i AppCustomer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.CreatedAt,
		&i.IsEnabled,
	)
	return i, err
}
