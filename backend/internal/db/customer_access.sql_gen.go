// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer_access.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAccess = `-- name: CreateAccess :one
INSERT INTO app.customer_access (customer_id, pin, always_allowed, time_zone)
VALUES ($1, $2, $3, $4)
RETURNING access_id, customer_id, pin, always_allowed, time_zone
`

type CreateAccessParams struct {
	CustomerID    uuid.UUID      `db:"customer_id" json:"customerId"`
	Pin           sql.NullString `db:"pin" json:"pin"`
	AlwaysAllowed sql.NullBool   `db:"always_allowed" json:"alwaysAllowed"`
	TimeZone      sql.NullString `db:"time_zone" json:"timeZone"`
}

func (q *Queries) CreateAccess(ctx context.Context, arg CreateAccessParams) (AppCustomerAccess, error) {
	row := q.db.QueryRowContext(ctx, createAccess,
		arg.CustomerID,
		arg.Pin,
		arg.AlwaysAllowed,
		arg.TimeZone,
	)
	var i AppCustomerAccess
	err := row.Scan(
		&i.AccessID,
		&i.CustomerID,
		&i.Pin,
		&i.AlwaysAllowed,
		&i.TimeZone,
	)
	return i, err
}

const deleteAccess = `-- name: DeleteAccess :exec
DELETE FROM app.customer_access WHERE access_id = $1
`

func (q *Queries) DeleteAccess(ctx context.Context, accessID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccess, accessID)
	return err
}

const getAccessByCustomer = `-- name: GetAccessByCustomer :one
SELECT access_id, customer_id, pin, always_allowed, time_zone FROM app.customer_access WHERE customer_id = $1
`

func (q *Queries) GetAccessByCustomer(ctx context.Context, customerID uuid.UUID) (AppCustomerAccess, error) {
	row := q.db.QueryRowContext(ctx, getAccessByCustomer, customerID)
	var i AppCustomerAccess
	err := row.Scan(
		&i.AccessID,
		&i.CustomerID,
		&i.Pin,
		&i.AlwaysAllowed,
		&i.TimeZone,
	)
	return i, err
}

const updateAccess = `-- name: UpdateAccess :one
UPDATE app.customer_access
SET pin = $2,
    always_allowed = $3,
    time_zone = $4
WHERE access_id = $1
RETURNING access_id, customer_id, pin, always_allowed, time_zone
`

type UpdateAccessParams struct {
	AccessID      int64          `db:"access_id" json:"accessId"`
	Pin           sql.NullString `db:"pin" json:"pin"`
	AlwaysAllowed sql.NullBool   `db:"always_allowed" json:"alwaysAllowed"`
	TimeZone      sql.NullString `db:"time_zone" json:"timeZone"`
}

func (q *Queries) UpdateAccess(ctx context.Context, arg UpdateAccessParams) (AppCustomerAccess, error) {
	row := q.db.QueryRowContext(ctx, updateAccess,
		arg.AccessID,
		arg.Pin,
		arg.AlwaysAllowed,
		arg.TimeZone,
	)
	var i AppCustomerAccess
	err := row.Scan(
		&i.AccessID,
		&i.CustomerID,
		&i.Pin,
		&i.AlwaysAllowed,
		&i.TimeZone,
	)
	return i, err
}
