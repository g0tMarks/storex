// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer_custom_field.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomField = `-- name: CreateCustomField :one
INSERT INTO app.customer_custom_fields (customer_id, field_name, field_value)
VALUES ($1, $2, $3)
RETURNING field_id, customer_id, field_name, field_value
`

type CreateCustomFieldParams struct {
	CustomerID int64          `db:"customer_id" json:"customerId"`
	FieldName  string         `db:"field_name" json:"fieldName"`
	FieldValue sql.NullString `db:"field_value" json:"fieldValue"`
}

func (q *Queries) CreateCustomField(ctx context.Context, arg CreateCustomFieldParams) (AppCustomerCustomField, error) {
	row := q.db.QueryRowContext(ctx, createCustomField, arg.CustomerID, arg.FieldName, arg.FieldValue)
	var i AppCustomerCustomField
	err := row.Scan(
		&i.FieldID,
		&i.CustomerID,
		&i.FieldName,
		&i.FieldValue,
	)
	return i, err
}

const deleteCustomField = `-- name: DeleteCustomField :exec
DELETE FROM app.customer_custom_fields WHERE field_id = $1
`

func (q *Queries) DeleteCustomField(ctx context.Context, fieldID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomField, fieldID)
	return err
}

const listCustomFieldsByCustomer = `-- name: ListCustomFieldsByCustomer :many
SELECT field_id, customer_id, field_name, field_value FROM app.customer_custom_fields WHERE customer_id = $1
`

func (q *Queries) ListCustomFieldsByCustomer(ctx context.Context, customerID int64) ([]AppCustomerCustomField, error) {
	rows, err := q.db.QueryContext(ctx, listCustomFieldsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppCustomerCustomField
	for rows.Next() {
		var i AppCustomerCustomField
		if err := rows.Scan(
			&i.FieldID,
			&i.CustomerID,
			&i.FieldName,
			&i.FieldValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomField = `-- name: UpdateCustomField :one
UPDATE app.customer_custom_fields
SET field_name = $2,
    field_value = $3
WHERE field_id = $1
RETURNING field_id, customer_id, field_name, field_value
`

type UpdateCustomFieldParams struct {
	FieldID    int64          `db:"field_id" json:"fieldId"`
	FieldName  string         `db:"field_name" json:"fieldName"`
	FieldValue sql.NullString `db:"field_value" json:"fieldValue"`
}

func (q *Queries) UpdateCustomField(ctx context.Context, arg UpdateCustomFieldParams) (AppCustomerCustomField, error) {
	row := q.db.QueryRowContext(ctx, updateCustomField, arg.FieldID, arg.FieldName, arg.FieldValue)
	var i AppCustomerCustomField
	err := row.Scan(
		&i.FieldID,
		&i.CustomerID,
		&i.FieldName,
		&i.FieldValue,
	)
	return i, err
}
