// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: units.sql

package db

import (
	"context"
	"database/sql"
)

const createUnit = `-- name: CreateUnit :one
INSERT INTO app.units (facility_id, unit_type, size, price, status)
VALUES ($1, $2, $3, $4, $5::app.unit_status)
RETURNING unit_id, facility_id, unit_type, size, price, status
`

type CreateUnitParams struct {
	FacilityID int64          `db:"facility_id" json:"facilityId"`
	UnitType   sql.NullString `db:"unit_type" json:"unitType"`
	Size       sql.NullString `db:"size" json:"size"`
	Price      sql.NullString `db:"price" json:"price"`
	Status     AppUnitStatus  `db:"status" json:"status"`
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (AppUnit, error) {
	row := q.db.QueryRowContext(ctx, createUnit,
		arg.FacilityID,
		arg.UnitType,
		arg.Size,
		arg.Price,
		arg.Status,
	)
	var i AppUnit
	err := row.Scan(
		&i.UnitID,
		&i.FacilityID,
		&i.UnitType,
		&i.Size,
		&i.Price,
		&i.Status,
	)
	return i, err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM app.units WHERE unit_id = $1
`

func (q *Queries) DeleteUnit(ctx context.Context, unitID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUnit, unitID)
	return err
}

const getUnit = `-- name: GetUnit :one
SELECT unit_id, facility_id, unit_type, size, price, status 
FROM app.units 
WHERE unit_id = $1
`

func (q *Queries) GetUnit(ctx context.Context, unitID int64) (AppUnit, error) {
	row := q.db.QueryRowContext(ctx, getUnit, unitID)
	var i AppUnit
	err := row.Scan(
		&i.UnitID,
		&i.FacilityID,
		&i.UnitType,
		&i.Size,
		&i.Price,
		&i.Status,
	)
	return i, err
}

const listUnits = `-- name: ListUnits :many
SELECT unit_id, facility_id, unit_type, size, price, status 
FROM app.units 
ORDER BY unit_id
`

func (q *Queries) ListUnits(ctx context.Context) ([]AppUnit, error) {
	rows, err := q.db.QueryContext(ctx, listUnits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppUnit
	for rows.Next() {
		var i AppUnit
		if err := rows.Scan(
			&i.UnitID,
			&i.FacilityID,
			&i.UnitType,
			&i.Size,
			&i.Price,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnitsByFacility = `-- name: ListUnitsByFacility :many
SELECT unit_id, facility_id, unit_type, size, price, status 
FROM app.units
WHERE facility_id = $1
ORDER BY unit_id
`

func (q *Queries) ListUnitsByFacility(ctx context.Context, facilityID int64) ([]AppUnit, error) {
	rows, err := q.db.QueryContext(ctx, listUnitsByFacility, facilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppUnit
	for rows.Next() {
		var i AppUnit
		if err := rows.Scan(
			&i.UnitID,
			&i.FacilityID,
			&i.UnitType,
			&i.Size,
			&i.Price,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUnit = `-- name: UpdateUnit :one
UPDATE app.units
SET facility_id = $1, unit_type = $2, size = $3, price = $4, status = $5::app.unit_status
WHERE unit_id = $6
RETURNING unit_id, facility_id, unit_type, size, price, status
`

type UpdateUnitParams struct {
	FacilityID int64          `db:"facility_id" json:"facilityId"`
	UnitType   sql.NullString `db:"unit_type" json:"unitType"`
	Size       sql.NullString `db:"size" json:"size"`
	Price      sql.NullString `db:"price" json:"price"`
	Status     AppUnitStatus  `db:"status" json:"status"`
	UnitID     int64          `db:"unit_id" json:"unitId"`
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) (AppUnit, error) {
	row := q.db.QueryRowContext(ctx, updateUnit,
		arg.FacilityID,
		arg.UnitType,
		arg.Size,
		arg.Price,
		arg.Status,
		arg.UnitID,
	)
	var i AppUnit
	err := row.Scan(
		&i.UnitID,
		&i.FacilityID,
		&i.UnitType,
		&i.Size,
		&i.Price,
		&i.Status,
	)
	return i, err
}
