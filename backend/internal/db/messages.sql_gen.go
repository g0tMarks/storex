// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: messages.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO app.messages (customer_id, type, direction, status)
VALUES ($1, $2, $3, $4)
RETURNING message_id, customer_id, type, direction, status
`

type CreateMessageParams struct {
	CustomerID int64          `db:"customer_id" json:"customerId"`
	Type       sql.NullString `db:"type" json:"type"`
	Direction  sql.NullString `db:"direction" json:"direction"`
	Status     sql.NullString `db:"status" json:"status"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (AppMessage, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.CustomerID,
		arg.Type,
		arg.Direction,
		arg.Status,
	)
	var i AppMessage
	err := row.Scan(
		&i.MessageID,
		&i.CustomerID,
		&i.Type,
		&i.Direction,
		&i.Status,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM app.messages WHERE message_id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, messageID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, messageID)
	return err
}

const getMessagesByCustomer = `-- name: GetMessagesByCustomer :many
SELECT message_id, customer_id, type, direction, status FROM app.messages WHERE customer_id = $1 ORDER BY message_id DESC
`

func (q *Queries) GetMessagesByCustomer(ctx context.Context, customerID int64) ([]AppMessage, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppMessage
	for rows.Next() {
		var i AppMessage
		if err := rows.Scan(
			&i.MessageID,
			&i.CustomerID,
			&i.Type,
			&i.Direction,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessages = `-- name: ListMessages :many
SELECT message_id, customer_id, type, direction, status FROM app.messages ORDER BY message_id DESC
`

func (q *Queries) ListMessages(ctx context.Context) ([]AppMessage, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppMessage
	for rows.Next() {
		var i AppMessage
		if err := rows.Scan(
			&i.MessageID,
			&i.CustomerID,
			&i.Type,
			&i.Direction,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE app.messages
SET type = $2, direction = $3, status = $4
WHERE message_id = $1
RETURNING message_id, customer_id, type, direction, status
`

type UpdateMessageParams struct {
	MessageID int64          `db:"message_id" json:"messageId"`
	Type      sql.NullString `db:"type" json:"type"`
	Direction sql.NullString `db:"direction" json:"direction"`
	Status    sql.NullString `db:"status" json:"status"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (AppMessage, error) {
	row := q.db.QueryRowContext(ctx, updateMessage,
		arg.MessageID,
		arg.Type,
		arg.Direction,
		arg.Status,
	)
	var i AppMessage
	err := row.Scan(
		&i.MessageID,
		&i.CustomerID,
		&i.Type,
		&i.Direction,
		&i.Status,
	)
	return i, err
}
