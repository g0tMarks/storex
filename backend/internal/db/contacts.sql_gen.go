// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: contacts.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO app.contacts (customer_id, first_name, last_name, email, phone_mobile, phone_home, phone_work, role, is_primary)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING contact_id, customer_id, first_name, last_name, email, phone_mobile, phone_home, phone_work, role, is_primary
`

type CreateContactParams struct {
	CustomerID  int64          `db:"customer_id" json:"customerId"`
	FirstName   sql.NullString `db:"first_name" json:"firstName"`
	LastName    sql.NullString `db:"last_name" json:"lastName"`
	Email       sql.NullString `db:"email" json:"email"`
	PhoneMobile sql.NullString `db:"phone_mobile" json:"phoneMobile"`
	PhoneHome   sql.NullString `db:"phone_home" json:"phoneHome"`
	PhoneWork   sql.NullString `db:"phone_work" json:"phoneWork"`
	Role        sql.NullString `db:"role" json:"role"`
	IsPrimary   sql.NullBool   `db:"is_primary" json:"isPrimary"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (AppContact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.CustomerID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneMobile,
		arg.PhoneHome,
		arg.PhoneWork,
		arg.Role,
		arg.IsPrimary,
	)
	var i AppContact
	err := row.Scan(
		&i.ContactID,
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneMobile,
		&i.PhoneHome,
		&i.PhoneWork,
		&i.Role,
		&i.IsPrimary,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM app.contacts WHERE contact_id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, contactID int64) error {
	_, err := q.db.ExecContext(ctx, deleteContact, contactID)
	return err
}

const listContactsByCustomer = `-- name: ListContactsByCustomer :many
SELECT contact_id, customer_id, first_name, last_name, email, phone_mobile, phone_home, phone_work, role, is_primary FROM app.contacts WHERE customer_id = $1 ORDER BY is_primary DESC
`

func (q *Queries) ListContactsByCustomer(ctx context.Context, customerID int64) ([]AppContact, error) {
	rows, err := q.db.QueryContext(ctx, listContactsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppContact
	for rows.Next() {
		var i AppContact
		if err := rows.Scan(
			&i.ContactID,
			&i.CustomerID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneMobile,
			&i.PhoneHome,
			&i.PhoneWork,
			&i.Role,
			&i.IsPrimary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE app.contacts
SET first_name = $2,
    last_name = $3,
    email = $4,
    phone_mobile = $5,
    phone_home = $6,
    phone_work = $7,
    role = $8,
    is_primary = $9
WHERE contact_id = $1
RETURNING contact_id, customer_id, first_name, last_name, email, phone_mobile, phone_home, phone_work, role, is_primary
`

type UpdateContactParams struct {
	ContactID   int64          `db:"contact_id" json:"contactId"`
	FirstName   sql.NullString `db:"first_name" json:"firstName"`
	LastName    sql.NullString `db:"last_name" json:"lastName"`
	Email       sql.NullString `db:"email" json:"email"`
	PhoneMobile sql.NullString `db:"phone_mobile" json:"phoneMobile"`
	PhoneHome   sql.NullString `db:"phone_home" json:"phoneHome"`
	PhoneWork   sql.NullString `db:"phone_work" json:"phoneWork"`
	Role        sql.NullString `db:"role" json:"role"`
	IsPrimary   sql.NullBool   `db:"is_primary" json:"isPrimary"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (AppContact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ContactID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneMobile,
		arg.PhoneHome,
		arg.PhoneWork,
		arg.Role,
		arg.IsPrimary,
	)
	var i AppContact
	err := row.Scan(
		&i.ContactID,
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneMobile,
		&i.PhoneHome,
		&i.PhoneWork,
		&i.Role,
		&i.IsPrimary,
	)
	return i, err
}
