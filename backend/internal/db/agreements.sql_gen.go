// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: agreements.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAgreement = `-- name: CreateAgreement :one
INSERT INTO app.agreements (
    customer_id,
    unit_id,
    start_date,
    end_date,
    status
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING agreement_id, customer_id, unit_id, start_date, end_date, status
`

type CreateAgreementParams struct {
	CustomerID int64        `db:"customer_id" json:"customerId"`
	UnitID     int64        `db:"unit_id" json:"unitId"`
	StartDate  time.Time    `db:"start_date" json:"startDate"`
	EndDate    sql.NullTime `db:"end_date" json:"endDate"`
	Status     interface{}  `db:"status" json:"status"`
}

func (q *Queries) CreateAgreement(ctx context.Context, arg CreateAgreementParams) (AppAgreement, error) {
	row := q.db.QueryRowContext(ctx, createAgreement,
		arg.CustomerID,
		arg.UnitID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i AppAgreement
	err := row.Scan(
		&i.AgreementID,
		&i.CustomerID,
		&i.UnitID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const deleteAgreement = `-- name: DeleteAgreement :exec
DELETE FROM app.agreements
WHERE agreement_id = $1
`

func (q *Queries) DeleteAgreement(ctx context.Context, agreementID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAgreement, agreementID)
	return err
}

const getAgreement = `-- name: GetAgreement :one
SELECT agreement_id, customer_id, unit_id, start_date, end_date, status FROM app.agreements WHERE agreement_id = $1
`

func (q *Queries) GetAgreement(ctx context.Context, agreementID int64) (AppAgreement, error) {
	row := q.db.QueryRowContext(ctx, getAgreement, agreementID)
	var i AppAgreement
	err := row.Scan(
		&i.AgreementID,
		&i.CustomerID,
		&i.UnitID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const getAgreementByID = `-- name: GetAgreementByID :one
SELECT agreement_id, customer_id, unit_id, start_date, end_date, status FROM app.agreements WHERE agreement_id = $1
`

func (q *Queries) GetAgreementByID(ctx context.Context, agreementID int64) (AppAgreement, error) {
	row := q.db.QueryRowContext(ctx, getAgreementByID, agreementID)
	var i AppAgreement
	err := row.Scan(
		&i.AgreementID,
		&i.CustomerID,
		&i.UnitID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}

const getAgreementCustomer = `-- name: GetAgreementCustomer :one
SELECT c.customer_id, c.customer_name, c.created_at, c.is_enabled
FROM app.agreements a
JOIN app.customers c ON a.customer_id = c.customer_id
WHERE a.agreement_id = $1
`

func (q *Queries) GetAgreementCustomer(ctx context.Context, agreementID int64) (AppCustomer, error) {
	row := q.db.QueryRowContext(ctx, getAgreementCustomer, agreementID)
	var i AppCustomer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.CreatedAt,
		&i.IsEnabled,
	)
	return i, err
}

const getAgreementInvoices = `-- name: GetAgreementInvoices :many
SELECT i.invoice_id, i.agreement_id, i.due_date, i.amount, i.status
FROM app.agreements a
JOIN app.invoices i ON a.agreement_id = i.agreement_id
WHERE a.agreement_id = $1
ORDER BY i.due_date DESC
`

func (q *Queries) GetAgreementInvoices(ctx context.Context, agreementID int64) ([]AppInvoice, error) {
	rows, err := q.db.QueryContext(ctx, getAgreementInvoices, agreementID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppInvoice
	for rows.Next() {
		var i AppInvoice
		if err := rows.Scan(
			&i.InvoiceID,
			&i.AgreementID,
			&i.DueDate,
			&i.Amount,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAgreementUnit = `-- name: GetAgreementUnit :one
SELECT u.unit_id, u.facility_id, u.unit_type, u.size, u.price, u.status
FROM app.agreements a
JOIN app.units u ON a.unit_id = u.unit_id
WHERE a.agreement_id = $1
`

func (q *Queries) GetAgreementUnit(ctx context.Context, agreementID int64) (AppUnit, error) {
	row := q.db.QueryRowContext(ctx, getAgreementUnit, agreementID)
	var i AppUnit
	err := row.Scan(
		&i.UnitID,
		&i.FacilityID,
		&i.UnitType,
		&i.Size,
		&i.Price,
		&i.Status,
	)
	return i, err
}

const listAgreements = `-- name: ListAgreements :many
SELECT agreement_id, customer_id, unit_id, start_date, end_date, status FROM app.agreements ORDER BY start_date DESC
`

func (q *Queries) ListAgreements(ctx context.Context) ([]AppAgreement, error) {
	rows, err := q.db.QueryContext(ctx, listAgreements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppAgreement
	for rows.Next() {
		var i AppAgreement
		if err := rows.Scan(
			&i.AgreementID,
			&i.CustomerID,
			&i.UnitID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgreementsByCustomer = `-- name: ListAgreementsByCustomer :many
SELECT agreement_id, customer_id, unit_id, start_date, end_date, status FROM app.agreements
WHERE customer_id = $1
ORDER BY start_date DESC
`

func (q *Queries) ListAgreementsByCustomer(ctx context.Context, customerID int64) ([]AppAgreement, error) {
	rows, err := q.db.QueryContext(ctx, listAgreementsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AppAgreement
	for rows.Next() {
		var i AppAgreement
		if err := rows.Scan(
			&i.AgreementID,
			&i.CustomerID,
			&i.UnitID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgreementStatus = `-- name: UpdateAgreementStatus :one
UPDATE app.agreements
SET status = $2
WHERE agreement_id = $1
RETURNING agreement_id, customer_id, unit_id, start_date, end_date, status
`

type UpdateAgreementStatusParams struct {
	AgreementID int64       `db:"agreement_id" json:"agreementId"`
	Status      interface{} `db:"status" json:"status"`
}

func (q *Queries) UpdateAgreementStatus(ctx context.Context, arg UpdateAgreementStatusParams) (AppAgreement, error) {
	row := q.db.QueryRowContext(ctx, updateAgreementStatus, arg.AgreementID, arg.Status)
	var i AppAgreement
	err := row.Scan(
		&i.AgreementID,
		&i.CustomerID,
		&i.UnitID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
	)
	return i, err
}
